<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: T-SQL | Grygoriy Mykhalyuno]]></title>
  <link href="http://grygoriy.github.io/blog/categories/t-sql/atom.xml" rel="self"/>
  <link href="http://grygoriy.github.io/"/>
  <updated>2013-10-12T01:02:37+03:00</updated>
  <id>http://grygoriy.github.io/</id>
  <author>
    <name><![CDATA[Grygoriy Mykhalyuno]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Drop all foreing key for MS SQL tables]]></title>
    <link href="http://grygoriy.github.io/blog/2012/01/09/drop-all-foreing-key-for-ms-sql-tables/"/>
    <updated>2012-01-09T18:55:00+02:00</updated>
    <id>http://grygoriy.github.io/blog/2012/01/09/drop-all-foreing-key-for-ms-sql-tables</id>
    <content type="html"><![CDATA[<p>My typical database development process usually looks like this of sql scripts for creating table, populating with test data and dropping tables. Creating tables usually goes pretty smoothly. I just run all script files to create schema and populate it with test data. When want to drop all tables to revert schema to previous version I have to execute scripts that drops tables, columns etc. Looks pretty simple, but using foreign keys force you to drop table in concrete order to resolve all foreign keys dependencies. I&#8217;m not exiting to have db script were I should be over careful and remember order how can I drop my tables.</p>

<p>For MySQL solution was to disable foreign key check for build operation and enable it after<br /> For MS SQL I&#8217;ve create simple stored procedure that drops all foreign keys point to this table. After it table<br /> can be deleted without any errors&lt;</p>

<p>Here is stored procedure {% codeblock lang:psql %} CREATE PROCEDURE drop_foreign_keys @table nvarchar(50) AS DECLARE tables_cursor CURSOR FOR SELECT &#8216;ALTER TABLE &#8217; + OBJECT_NAME(parent_object_id) + &#8217; DROP CONSTRAINT &#8217; + name as dropkey FROM sys.foreign_keys WHERE referenced_object_id = object_id(@table) OPEN tables_cursor;</p>

<pre><code>DECLARE @dropkey sysname;
FETCH NEXT FROM tables_cursor INTO @dropkey;
WHILE (@@FETCH_STATUS &amp;lt;&amp;gt; -1)
BEGIN;
  EXECUTE (@dropkey);
  FETCH NEXT FROM tables_cursor INTO @dropkey;
END;

CLOSE tables_cursor;
DEALLOCATE tables_cursor;</code></pre>

<p>GO {% endcodeblock %} And how to use it {% codeblock lang:psql %} EXECUTE drop_foreign_keys N&#8217;TableТame&#8217; IF EXISTS(SELECT 1 FROM sys.objects WHERE OBJECT_ID = OBJECT_ID(N&#8217;TableТame&#8217;) AND type = (N&#8217;U&#8217;)) DROP TABLE TableName {% endcodeblock %}</p>]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Groovy | Grygoriy Mykhalyuno]]></title>
  <link href="http://grygoriy.github.io/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://grygoriy.github.io/"/>
  <updated>2013-10-12T01:02:37+03:00</updated>
  <id>http://grygoriy.github.io/</id>
  <author>
    <name><![CDATA[Grygoriy Mykhalyuno]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional testing with Selenium and Groovy for ITBooze]]></title>
    <link href="http://grygoriy.github.io/blog/2013/10/09/functional-testing-with-selenium-and-groovy-for-itbooze/"/>
    <updated>2013-10-09T09:15:00+03:00</updated>
    <id>http://grygoriy.github.io/blog/2013/10/09/functional-testing-with-selenium-and-groovy-for-itbooze</id>
    <content type="html"><![CDATA[<object height='480' width='640'><param name='movie' value='//www.youtube.com/v/gXBOHVYqN-k?hl=en_US&amp;version=3' /><param name='allowFullScreen' value='true' /><param name='allowscriptaccess' value='always' /><embed allowfullscreen='true' allowscriptaccess='always' height='480' src='http://grygoriy.github.io//www.youtube.com/v/gXBOHVYqN-k?hl=en_US&amp;version=3' type='application/x-shockwave-flash' width='640' /></object>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deleting grails domain entity without fetching it]]></title>
    <link href="http://grygoriy.github.io/blog/2012/10/24/deleting-grails-domain-entity-without-fetching-it/"/>
    <updated>2012-10-24T15:52:00+03:00</updated>
    <id>http://grygoriy.github.io/blog/2012/10/24/deleting-grails-domain-entity-without-fetching-it</id>
    <content type="html"><![CDATA[<p>So many times I&#8217;ve seen how people working with Hibernate and complaining how slow it is. What I actually see, is how people do not care about tools that they are using. They have strange assumption if tool supposed to their life easier then it supposes to 100% easier and no reason to read posts about such tool or investigate how it can be configured. Here is only on tip how to avoid useless selects hibernate or Grails GORM. Imaging you have an application that manipulates some data, lets say Comments. There is also controller or some API to delete one comment. If request comes from somewhere outside you application usually it looks like delete something with id=1. http://localhost/comments/delete/1 Implementation of controller usually looks like {% codeblock lang:groovy %} def deleteComment() { def commentId = params.long(&#8216;id&#8217;) def comment = Comment.findById(commentId) comment?.delete() } {% endcodeblock %} So bad part on this example is that we fetch from database entity that we do not need at all. We want to delete it. Hibernate and so GORM are working objects and not with parts of its fields. But it doesn&#8217;t mean that you cannot do it, just use HQL. Here is simple HQL that will generates pure delete SQL query. Comments.executeUpdate(&#8220;delete from Comments where id = :id&#8221;, <span>id:commentId</span>) Of cause you would like to write such code whenever you will need to delete entity, so we will add dynamic method to each Domain class in our application. Please add next code to your BootStrap.groovy {% codeblock lang:groovy %} def grailsApplication</p>

<pre><code>def init = { servletContext -&gt;
    grailsApplication.domainClasses.each {def domain -&gt;
        domain.metaClass.static.deleteById = {def id -&gt;
            executeUpdate(&quot;delete from ${domain.name} where id = :id&quot;, [id:id])
        }
    }
}</code></pre>

<p>{% endcodeblock %} Now each of your domain class has the method deleteById, and our example became {% codeblock lang:groovy %} def deleteComment() { def commentId = params.long(&#8216;id&#8217;) Comment.deleteById(commentId) } {% endcodeblock %} You can use this Grails plugin https://github.com/grygoriy/grails_gorm_utils that adds this method for you. Enjoy!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prevent brute force attack with Spring Security]]></title>
    <link href="http://grygoriy.github.io/blog/2012/10/06/prevent-brute-force-attack-with-spring-security/"/>
    <updated>2012-10-06T15:58:00+03:00</updated>
    <id>http://grygoriy.github.io/blog/2012/10/06/prevent-brute-force-attack-with-spring-security</id>
    <content type="html"><![CDATA[<p>Spring Security can do lot of stuff for you. Account blocking, password salt. But what about brute force blocker. That what you have to do by yourself. Fortunately spring is quite flexible framework so it is not a big deal to configure it.</p>

<p>Let me show you little guide how to do this for Grails application. <!--more--> First you have to enable springSecurityEventListener in your Config.groovy grails.plugins.springsecurity.useSecurityEventListener = true</p>

<p>then implement listeners in /src/bruteforce create classes {% codeblock lang:groovy %}</p>

<p>/** Registers all failed attempts to login. Main purpose to count attempts for particular account ant block user</p>

<p><em>/ class AuthenticationFailureListener implements ApplicationListener {</em></p>

<pre><code>LoginAttemptCacheService loginAttemptCacheService

@Override
void onApplicationEvent(AuthenticationFailureBadCredentialsEvent e) {
    loginAttemptCacheService.failLogin(e.authentication.name)
}</code></pre>

<p>} {% endcodeblock %} next we have to create listener for successful logins in same package {% codeblock lang:groovy %}</p>

<p>/** Listener for successfull logins. Used for reseting number on unsuccessfull logins for specific account <em>/ class AuthenticationSuccessEventListener implements ApplicationListener{</em></p>

<pre><code>LoginAttemptCacheService loginAttemptCacheService

@Override
void onApplicationEvent(AuthenticationSuccessEvent e) {
    loginAttemptCacheService.loginSuccess(e.authentication.name)
}</code></pre>

<p>} {% endcodeblock %} We were not putting them in our grails-app folder so we need to register these classes as spring beans. Add next lines into grails-app/conf/spring/resources.groovy {% codeblock lang:groovy %}</p>

<p>beans = { authenticationFailureListener(AuthenticationFailureListener) { loginAttemptCacheService = ref(&#8216;loginAttemptCacheService&#8217;) }</p>

<pre><code>authenticationSuccessEventListener(AuthenticationSuccessEventListener) {
    loginAttemptCacheService = ref(&#39;loginAttemptCacheService&#39;)
}</code></pre>

<p>} {% endcodeblock %} You&#8217;ve probably notice usage of LoginAttemptCacheService loginAttemptCacheService Let&#8217;s implement it. This would be typical grails service {% codeblock lang:groovy %}</p>

<p>package com.grygoriy</p>

<p>import com.google.common.cache.CacheBuilder import com.google.common.cache.CacheLoader import com.google.common.cache.LoadingCache</p>

<p>import java.util.concurrent.TimeUnit import org.apache.commons.lang.math.NumberUtils import javax.annotation.PostConstruct</p>

<p>class LoginAttemptCacheService {</p>

<pre><code>private LoadingCache attempts;
private int allowedNumberOfAttempts
def grailsApplication

@PostConstruct
void init() {
    allowedNumberOfAttempts = grailsApplication.config.brutforce.loginAttempts.allowedNumberOfAttempts
    int time = grailsApplication.config.brutforce.loginAttempts.time

    log.info &quot;account block configured for $time minutes&quot;
    attempts = CacheBuilder.newBuilder()
               .expireAfterWrite(time, TimeUnit.MINUTES)
               .build({0} as CacheLoader);
}

/**
 * Triggers on each unsuccessful login attempt and increases number of attempts in local accumulator
 * @param login - username which is trying to login
 * @return
 */
def failLogin(String login) {
    def numberOfAttempts = attempts.get(login)
    log.debug &quot;fail login $login previous number for attempts $numberOfAttempts&quot;
    numberOfAttempts++

    if (numberOfAttempts &amp;gt; allowedNumberOfAttempts) {
        blockUser(login)
        attempts.invalidate(login)
    } else {
        attempts.put(login, numberOfAttempts)
    }
}

/**
 * Triggers on each successful login attempt and resets number of attempts in local accumulator
 * @param login - username which is login
 */
def loginSuccess(String login) {
    log.debug &quot;successfull login for $login&quot;
    attempts.invalidate(login)
}

/**
 * Disable user account so it would not able to login
 * @param login - username that has to be disabled
 */
private void blockUser(String login) {
    log.debug &quot;blocking user: $login&quot;
    def user = User.findByUsername(login)
    if (user) {
        user.accountLocked = true;
        user.save(flush: true)
    }
}</code></pre>

<p>} {% endcodeblock %} We will be using CacheBuilder from google guava library. So please add next lines to BuildConfig.groovy {% codeblock lang:groovy %}</p>

<pre><code>dependencies {
    runtime &#39;com.google.guava:guava:11.0.1&#39;
}</code></pre>

<p>{% endcodeblock %} And the last step we will add service configuration to Config.groovy {% codeblock lang:groovy %}</p>

<p>brutforce { loginAttempts { time = 5 allowedNumberOfAttempts = 3 } {% endcodeblock %} That is it, you ready to run you application. For typical java project almost everything will be the same. Same listeners and same services.</p>

<p>More about Spring Security Events More about caching with Google guava</p>

<p>Grails users can simple use this plugin https://github.com/grygoriy/bruteforcedefender UPD: Plugin now at http://grails.org/plugin/bruteforce-defender Enjoy :)</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesomeness of groovy named parameters]]></title>
    <link href="http://grygoriy.github.io/blog/2012/02/13/awesomeness-of-groovy-named-parameters/"/>
    <updated>2012-02-13T18:33:00+02:00</updated>
    <id>http://grygoriy.github.io/blog/2012/02/13/awesomeness-of-groovy-named-parameters</id>
    <content type="html"><![CDATA[<p>How do you call typical method with few parameters. Lets assume we have method that sends email with signature<br /> {% codeblock lang:groovy %} send(String from, String to, String subject, String body) { println &#8220;sender ${from}&#8221; println &#8220;sender ${to}&#8221; println &#8220;sender ${subject}&#8221; println &#8220;sender ${body}&#8221; } {% endcodeblock %} typical java call would be {% codeblock lang:groovy %} send(&#8220;john@example.com&#8221;, &#8220;mike@example.com&#8221;, &#8220;greetings&#8221;, &#8220;Hello Goodbye&#8221;) {% endcodeblock %}</p>

<p>Too many strings, don&#8217;t you think? I have to check java docs all the time I&#8217;m writing this method.<br /> Groovy allows us to pass parameters as map without <span />. If we pass map into method groovy set it to the first parameter. Let&#8217;s look into other exampl</p>

<p>{% codeblock lang:groovy %} send from:&#8221;john@example.com&#8221;, to:&#8221;mike@example.com&#8221;, subject:&#8221;greetings&#8221;, body:&#8221;Hello Goodbye&#8221; {% endcodeblock %} Much more readable as for me. And method will looks like {% codeblock lang:groovy %} send(params) { println &#8220;sender ${params.from}&#8221; println &#8220;sender ${params.to}&#8221; println &#8220;sender ${params.subject}&#8221; println &#8220;sender ${params.body}&#8221; } {% endcodeblock %}</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run Grails application on separate port]]></title>
    <link href="http://grygoriy.github.io/blog/2012/02/06/how-to-run-grails-application-on-separate-port/"/>
    <updated>2012-02-06T18:30:00+02:00</updated>
    <id>http://grygoriy.github.io/blog/2012/02/06/how-to-run-grails-application-on-separate-port</id>
    <content type="html"><![CDATA[<p>Some times you need to run your Grails app on different port and different context during development. Typical example when you are developing application that is divided into two or more apps (Services or other) So one application will run on 8080 and other for example 8081. That&#8217;s allows you to run both applications in same time, work with them and debug</p>

<p>So we can change port with command <br /> <strong>grails run-app -Dserver.port=8081</strong></p>

<p>But it is not very convenient to do it all the time, so I prefer to change it in BuildConfig.groovy, just put next line somewhere in file <br /> <strong>grails.server.port.http=&#8221;8081&#8221;</strong></p>

<p>and to change running context (default is localhost:8080/appname) add app.context= to application.properties. Next line will run Grails application at root context <br /> <strong>app.context=/</strong></p>]]></content>
  </entry>
  
</feed>
